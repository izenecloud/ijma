/** \file jma_main.dox
 * Document for doxygen mainpage.
 * 
 * \author Jun Jiang
 * \version 2.0
 * \date Sep 20, 2010
 */

/*! \mainpage iJMA Library
<b>iJMA</b> (iZENEsoft Japanese Morphological Analyzer) is a platform-independent C++ library for Japanese word segmentation and POS tagging.

<H2>Table of guidance</H2>
- \ref build
- \ref dictionary
- \ref demo
- \ref interface

\section build How to build and link with the library

<a href="http://www.cmake.org">CMake</a> is a prerequisite to the library. We use it to generate Makefile for each platform.

\subsection build_linux Linux platform

\code
$ cd build
$ cmake ../source
$ make
\endcode

After the project is built, the library targets \c libjma.a is created in directory \c lib, and the executables in directory \c bin are created for demo and test.

\subsection build_win32 Win32 platform

Please first check whether Visual Studio 9 2008 is installed beforehand. Below is an example to generate MSVC project file JMA.sln, please open it to build inside MSVC IDE.

\code
$ cd build
$ cmake -G "Visual Studio 9 2008" ../source
\endcode

You could also use other Visual Studio version, in which case you need to replace <tt>Visual Studio 9 2008</tt> to your version in below example.

\subsection build_aix AIX platform

On AIX platform, we could build using XLC compiler like below.

\code
$ cd build
$ export CC=xlC_r CXX=xlC_r OBJECT_MODE=64
$ cmake -DCMAKE_COMPILER_IS_XLC=1 ../source
$ make
\endcode

\subsection link Link with the library

To link with the library, the user application needs to include header files in directory <tt>include</tt>, and link the library files <tt>libjma.a</tt> in directory <tt>lib</tt>.

An example of compiling user application <tt>test.cpp</tt> on Linux platform looks like:

\code
$ export JMA_PATH=path_of_jma_project
$ g++ -o test -I$JMA_PATH/include test.cpp $JMA_PATH/lib/libjma.a
\endcode

\n
\section dictionary Get the dictioanry
The library runs by loading dictionary files at run time. There are two types of dictionary, system dictionary and user dictionary.

\subsection system_dict System dictionary

At run time, the library loads the system dictionary in binary format. They could be downloaded like below. If your download access is denied, please follow the instructions in <a href="https://ssl.izenesoft.cn/projects/izenesoft/wiki/Resources">here</a>.

\code
$ rsync -rvP dev@izenesoft.com:jma-data/db/ipadic .
\endcode

Directory \c ipadic contains four sub-directories. In \c src directory, it contains source files to compile into binary format. The other three directories contain the compiled binary format for each character encoding type. Directory \c bin_eucjp is for EUC-JP encoding, \c bin_sjis for SHIFT-JIS encoding, and \c bin_utf8 for UTF-8 encoding.

\subsection user_dict User dictionary
User dictionary file is in text format, which contains nouns defined by user. The sample user dictionary file could be downloaded like below.

\code
$ rsync -rvP dev@izenesoft.com:jma-data/db/userdic .
\endcode

Directory \c userdic contains three sample files. Each is encoded in one character encoding type of EUC-JP, SHIFT-JIS and UTF-8. The grammar of user dictionary is defined in the comment section of these sample files.

\n
\section demo How to run the demo

To run the demo \c bin/jma_run, please make sure the project is built and system dictionary is downloaded (see previous two sections).

Below is the demo general usage:
\code
$ cd bin
$ ./jma_run --sentence N-best [--dict DICT_PATH]
$ ./jma_run --string [--dict DICT_PATH]
$ ./jma_run --stream INPUT OUTPUT [--dict DICT_PATH]
\endcode

The \c DICT_PATH is the path of binary system dictionary, such like \c ipadic/bin_eucjp. Below are the details to run each demo.

To analyze 5-best results of a sentence string from standard input.
\code
$ ./jma_run --sentence 5 --dict ipadic/bin_utf8
\endcode

To exit the loop in the above demos, please press CTRL-D.

To analyze a paragraph string from standard input.
\code
$ ./jma_run --string --dict ipadic/bin_utf8
\endcode

To analyze file from \c INPUT to \c OUTPUT. Please note that the encoding type of \c INPUT file should be the same to the encoding type of system dictionary in \c DICT_PATH.

\code
$ ./jma_run --stream INPUT OUTPUT --dict ipadic/bin_utf8
\endcode

The demo source code could be available at : <a href="test__jma__run_8cpp_source.html">test_jma_run.cpp</a>.

\n
\section interface How to use the interface
Step 1: Include the header files in directory \c include
\code
#include "ijma.h"
\endcode

Step 2: Use the library name space
\code
using namespace jma;
\endcode

Step 3: Call the interface and handle the result

The example code could be available at: <a href="test__jma__run_8cpp_source.html">test_jma_run.cpp</a>.

\attention In below example, the return value of some functions are not handled for simplicity. In your using, please properly handle those return values in case of failure.

\code
// create instances
JMA_Factory* factory = JMA_Factory::instance();
Analyzer* analyzer = factory->createAnalyzer();
Knowledge* knowledge = factory->createKnowledge();

// set the system dictionary path
knowledge->setSystemDict("ipadic/bin_eucjp");
// (optional) add the paths of multiple user dictionaries
knowledge->addUserDict("userdic/user_noun.utf8", Knowledge::ENCODE_TYPE_UTF8);
knowledge->addUserDict("userdic/user_noun.eucjp", Knowledge::ENCODE_TYPE_EUCJP);
knowledge->addUserDict("userdic/user_noun.sjis", Knowledge::ENCODE_TYPE_SJIS);
// load system and user dictionary files
knowledge->loadDict();

// (optional) load stop word dictionary
knowledge->loadStopWordDict("...");

// (optional) configure analysis option if necessary
analyzer->setOption(Analyzer::OPTION_TYPE_***, ...);

// set knowledge
analyzer->setKnowledge(knowledge);

// analyze a sentence
Sentence s("...");
analyzer->runWithSentence(s);

// analyze a paragraph
const char* result = analyzer->runWithString("...");

// analyze a file
analyzer->runWithStream("...", "...");

// destroy instances
delete knowledge;
delete analyzer;
\endcode

\n
Copyright (C) 2010, iZENEsoft. All rights reserved. \n
Author: Jun <jun.zju@gmail.com>, Vernkin <vernkin@gmail.com> \n
Version: 2.0.0 \n
Date: 2010-09-20 \n
*/
